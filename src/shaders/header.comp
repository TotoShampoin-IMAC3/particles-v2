#version 430 core

struct Particle
{
    vec4 position;
    vec4 color;
    float size;
    float angle;
    float life;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticleBuffer
{
    Particle particles[];
};

layout(std430, binding = 1) buffer InitBuffer
{
    Particle particles_init[];
};

layout(std430, binding = 2) buffer VelocityBuffer
{
    Particle particles_velocity[];
};

layout(std430, binding = 3) buffer InitVelocityBuffer
{
    Particle particles_init_velocity[];
};

uniform int u_particle_count;
uniform float u_delta_time;
uniform float u_time;

const float UINT_MAX_AS_FLOAT = 4294967295.;
const float PI = 3.14159265359;

uint hash(uint seed)
{
    seed += (seed << 10u);
    seed ^= (seed >> 6u);
    seed += (seed << 3u);
    seed ^= (seed >> 11u);
    seed += (seed << 15u);
    return seed;
}

uvec4 hashToHash4(uint seed)
{
    uint rand1 = hash(seed);
    uint rand2 = hash(rand1);
    uint rand3 = hash(rand2);
    uint rand4 = hash(rand3);
    return uvec4(rand1, rand2, rand3, rand4);
}

vec4 hashNormalized(uint seed)
{
    return vec4(hashToHash4(seed)) / UINT_MAX_AS_FLOAT;
}
